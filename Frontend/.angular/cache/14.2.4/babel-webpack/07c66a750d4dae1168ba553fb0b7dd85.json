{"ast":null,"code":"import _asyncToGenerator from \"/Users/manuelsava/Documents/Lavoro/HRM/Spring-Angular-App/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from \"@angular/core\";\nimport { Student } from \"../students/student.model\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentsService {\n  constructor(http) {\n    this.http = http;\n    this.students = [];\n    this.selectedStudent = {};\n    this.studentWasSelected = new EventEmitter();\n    this.studentsLoaded = new EventEmitter();\n    this.studentDeleted = new EventEmitter();\n    this.loadStudents();\n  }\n\n  loadStudents() {\n    this.http.get(environment.apiUrl + \"/api/v1/student/all\").subscribe(res => {\n      this.students = [];\n      res.forEach(e => {\n        const s = new Student(e.firstName, e.lastName, e.email, new Date(e.dateOfBirth), e.age, e.id);\n        this.students.push(s);\n      });\n      this.studentsLoaded.emit();\n    });\n  }\n\n  addStudent(student, universityId) {\n    this.http.post(environment.apiUrl + \"/api/v1/student/enroll\", {\n      \"student\": {\n        \"firstName\": student.firstName,\n        \"lastName\": student.lastName,\n        \"dateOfBirth\": student.dob\n      },\n      \"universityId\": universityId\n    }).subscribe(res => {\n      if (res) {\n        this.loadStudents();\n      }\n    });\n  }\n\n  updateStudent(student) {\n    this.students[student.id] = student;\n  }\n\n  deleteStudent(studentId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.http.delete(environment.apiUrl + \"/api/v1/student/delete/\" + studentId).subscribe(res => {\n        if (res) {\n          _this.studentDeleted.emit(true);\n\n          _this.loadStudents();\n        } else {\n          _this.studentDeleted.emit(false);\n        }\n      });\n    })();\n  }\n\n  selectStudent(student) {\n    this.selectedStudent = student;\n    this.studentWasSelected.emit(student);\n  }\n\n  getStudent(id) {\n    var entity = {};\n    this.students.forEach(s => {\n      if (s.id === id) entity = s;\n    });\n    return entity;\n  }\n\n}\n\nStudentsService.ɵfac = function StudentsService_Factory(t) {\n  return new (t || StudentsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nStudentsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StudentsService,\n  factory: StudentsService.ɵfac\n});","map":{"version":3,"mappings":";AACA,SAAqCA,YAArC,QAAyD,eAAzD;AAEA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,WAAT,QAA4B,8BAA5B;;;AAGA,OAAM,MAAOC,eAAP,CAAsB;EAOxBC,YAAmBC,IAAnB,EAAmC;IAAhB;IANnB,gBAAsB,EAAtB;IACA,uBAA2B,EAA3B;IACU,0BAAqB,IAAIL,YAAJ,EAArB;IACA,sBAAiB,IAAIA,YAAJ,EAAjB;IACA,sBAAiB,IAAIA,YAAJ,EAAjB;IAGN,KAAKM,YAAL;EACH;;EAEDA,YAAY;IACR,KAAKD,IAAL,CAAUE,GAAV,CAAcL,WAAW,CAACM,MAAZ,GAAqB,qBAAnC,EAA0DC,SAA1D,CAAqEC,GAAD,IAAa;MAC7E,KAAKC,QAAL,GAAgB,EAAhB;MACAD,GAAG,CAACE,OAAJ,CAAaC,CAAD,IAAW;QACnB,MAAMC,CAAC,GAAG,IAAIb,OAAJ,CAAYY,CAAC,CAACE,SAAd,EAAyBF,CAAC,CAACG,QAA3B,EAAqCH,CAAC,CAACI,KAAvC,EAA8C,IAAIC,IAAJ,CAASL,CAAC,CAACM,WAAX,CAA9C,EAAuEN,CAAC,CAACO,GAAzE,EAA8EP,CAAC,CAACQ,EAAhF,CAAV;QACA,KAAKV,QAAL,CAAcW,IAAd,CAAmBR,CAAnB;MACH,CAHD;MAKA,KAAKS,cAAL,CAAoBC,IAApB;IACH,CARD;EASH;;EAEDC,UAAU,CAACC,OAAD,EAAmBC,YAAnB,EAAuC;IAC7C,KAAKtB,IAAL,CAAUuB,IAAV,CAAe1B,WAAW,CAACM,MAAZ,GAAqB,wBAApC,EACE;MACE,WAAY;QACV,aAAakB,OAAO,CAACX,SADX;QAEV,YAAYW,OAAO,CAACV,QAFV;QAGV,eAAeU,OAAO,CAACG;MAHb,CADd;MAME,gBAAgBF;IANlB,CADF,EAQKlB,SARL,CAQeC,GAAG,IAAG;MACjB,IAAGA,GAAH,EAAQ;QACJ,KAAKJ,YAAL;MACH;IACJ,CAZD;EAaH;;EAEDwB,aAAa,CAACJ,OAAD,EAAiB;IAC1B,KAAKf,QAAL,CAAce,OAAO,CAACL,EAAtB,IAA6BK,OAA7B;EACH;;EAEKK,aAAa,CAACC,SAAD,EAAkB;IAAA;;IAAA;MACjC,KAAI,CAAC3B,IAAL,CAAU4B,MAAV,CAAiB/B,WAAW,CAACM,MAAZ,GAAqB,yBAArB,GAAiDwB,SAAlE,EAA6EvB,SAA7E,CAAwFC,GAAD,IAAQ;QAC3F,IAAGA,GAAH,EAAQ;UACJ,KAAI,CAACwB,cAAL,CAAoBV,IAApB,CAAyB,IAAzB;;UACA,KAAI,CAAClB,YAAL;QACH,CAHD,MAGO;UACH,KAAI,CAAC4B,cAAL,CAAoBV,IAApB,CAAyB,KAAzB;QACH;MACJ,CAPD;IADiC;EASpC;;EAEDW,aAAa,CAACT,OAAD,EAAiB;IAC1B,KAAKU,eAAL,GAAuBV,OAAvB;IACA,KAAKW,kBAAL,CAAwBb,IAAxB,CAA6BE,OAA7B;EACH;;EAEDY,UAAU,CAACjB,EAAD,EAAW;IACjB,IAAIkB,MAAM,GAAG,EAAb;IACA,KAAK5B,QAAL,CAAcC,OAAd,CAAuBE,CAAD,IAAM;MACxB,IAAGA,CAAC,CAACO,EAAF,KAASA,EAAZ,EACIkB,MAAM,GAAGzB,CAAT;IACP,CAHD;IAKA,OAAOyB,MAAP;EACH;;AAnEuB;;;mBAAfpC,iBAAeqC;AAAA;;;SAAfrC;EAAesC,SAAftC,eAAe","names":["EventEmitter","Student","environment","StudentsService","constructor","http","loadStudents","get","apiUrl","subscribe","res","students","forEach","e","s","firstName","lastName","email","Date","dateOfBirth","age","id","push","studentsLoaded","emit","addStudent","student","universityId","post","dob","updateStudent","deleteStudent","studentId","delete","studentDeleted","selectStudent","selectedStudent","studentWasSelected","getStudent","entity","i0","factory"],"sourceRoot":"","sources":["/Users/manuelsava/Documents/Lavoro/HRM/Spring-Angular-App/Frontend/src/app/services/students.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable, OnInit, Output, EventEmitter } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { Student } from \"../students/student.model\";\nimport { environment } from \"src/environments/environment\";\n\n@Injectable()\nexport class StudentsService {\n    students: Student[] = [];\n    selectedStudent: Student = {} as Student;\n    @Output() studentWasSelected = new EventEmitter<Student>();\n    @Output() studentsLoaded = new EventEmitter();\n    @Output() studentDeleted = new EventEmitter<boolean>();\n\n    constructor(public http: HttpClient) {\n        this.loadStudents();\n    }\n\n    loadStudents() {\n        this.http.get(environment.apiUrl + \"/api/v1/student/all\").subscribe((res: any) => {\n            this.students = [];\n            res.forEach((e: any) => {\n                const s = new Student(e.firstName, e.lastName, e.email, new Date(e.dateOfBirth), e.age, e.id);\n                this.students.push(s);\n            });\n\n            this.studentsLoaded.emit();\n        })\n    }\n\n    addStudent(student: Student, universityId: number){\n        this.http.post(environment.apiUrl + \"/api/v1/student/enroll\", \n          {\n            \"student\" : {\n              \"firstName\": student.firstName,\n              \"lastName\": student.lastName,\n              \"dateOfBirth\": student.dob\n            },\n            \"universityId\": universityId\n          }).subscribe(res => {\n            if(res) {\n                this.loadStudents();\n            } \n        })\n    }\n\n    updateStudent(student: Student){\n        this.students[student.id!] = student;\n    }\n\n    async deleteStudent(studentId: number) {\n        this.http.delete(environment.apiUrl + \"/api/v1/student/delete/\" + studentId).subscribe((res) => {\n            if(res) {\n                this.studentDeleted.emit(true);\n                this.loadStudents();\n            } else {\n                this.studentDeleted.emit(false);\n            }\n        });\n    }\n\n    selectStudent(student: Student) {\n        this.selectedStudent = student;\n        this.studentWasSelected.emit(student);\n    }\n\n    getStudent(id: number): Student {\n        var entity = {} as Student;\n        this.students.forEach((s) => {\n            if(s.id === id)\n                entity = s;\n        });\n\n        return entity;\n    }\n}"]},"metadata":{},"sourceType":"module"}